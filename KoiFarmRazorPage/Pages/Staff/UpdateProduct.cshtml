@page
@model KoiFarmRazorPage.Pages.Staff.UpdateProductModel
@{
    Layout = "~/Pages/Shared/_StaffLayout.cshtml";
    ViewData["Title"] = "Update Product";
    string imageSrc = Model.Product != null && Model.Product.ImageData != null
        ? $"data:image/png;base64,{Convert.ToBase64String(Model.Product.ImageData)}"
        : string.Empty;
}


<h2>@ViewData["Title"]</h2>
<div class="content">
    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-success">@Model.Message</div>
    }
    <form method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()


        <div class="form-group">
            <input type="hidden" name="productId" id="productId" class="form-input" value="@Model.Product.ProductId"/>

        </div>

        <div class="form-group">
            <label for="productName" class="form-label">Product Name</label>
            <input type="text" name="productName" id="productName" class="form-input" value="@Model.Product.Name"/>
            @if (Model.ValidateErrors.ContainsKey("ProductName"))
            {
                @Model.ValidateErrors["ProductName"]
            }
        </div>

        <div class="form-group">
            <label for="productType" class="form-label">Product Type</label>
            <select name="productType" id="productType" class="form-select">
                <option value="">Select Product Type </option>
                @* <option value="Food">Food</option>
				<option value="Equipment">Equipment</option>
				<option value="Tank">Tank</option> *@
                <option value="Food" selected="@(Model.Product.Type == "Food" ? "selected" : "")">Food</option>
                <option value="Equipment" selected="@(Model.Product.Type == "Equipment" ? "selected" : "")">Equipment</option>
                <option value="Tank" selected="@(Model.Product.Type == "Tank" ? "selected" : "")">Tank</option>

            </select>
            @if (Model.ValidateErrors.ContainsKey("ProductType"))
            {
                @Model.ValidateErrors["ProductType"]
            }

        </div>


        <div class="form-group">
            <label for="productImage" class="form-label">Product Image</label>
            <input type="file" name="productImage" id="productImage" class="form-input"/>
            <img src="@imageSrc" alt="Product Image" style="max-width: 200px; max-height: 200px;"/>
            @if (Model.ValidateErrors.ContainsKey("ProductImage"))
            {
                @Model.ValidateErrors["ProductImage"]
            }
        </div>

        <div class="form-group">
            <label for="productPrice" class="form-label">Product Price</label>
            <input type="text" name="productPrice" id="productPrice" class="form-input" value="@Model.Product.Price"/>
            @if (Model.ValidateErrors.ContainsKey("ProductPrice"))
            {
                @Model.ValidateErrors["ProductPrice"]
            }
        </div>
        <div class="form-group">
            <label for="productQuantity" class="form-label">Product Quantity</label>
            <input type="text" name="productQuantity" id="productQuantity" class="form-input" value="@Model.Product.Quantity"/>
            @if (Model.ValidateErrors.ContainsKey("ProductQuantity"))
            {
                @Model.ValidateErrors["ProductQuantity"]
            }
        </div>
        <div class="form-group">
            <label for="productStatus" class="form-label">Product Status</label>
            <select name="productStatus" id="productStatus" class="form-select">
                <option value="">Select Product Status </option>
                @* <option value="Available">Available</option>
				<option value="Out of Stock">Out of Stock</option> *@
                <option value="Available" selected="@(Model.Product.Status == "Available" ? "selected" : "")">Available</option>
                <option value="Out of Stock" selected="@(Model.Product.Status == "Out of Stock" ? "selected" : "")">Out of Stock</option>


            </select>

            @if (Model.ValidateErrors.ContainsKey("ProductStatus"))
            {
                @Model.ValidateErrors["ProductStatus"]
            }

            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </form>
</div>

<!-- Optional: Your custom styles -->
<style>
	.form-group {
		margin-bottom: 20px;
	}

	.form-label {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.form-input,
	.form-textarea,
	.form-select {
		padding: 10px;
		border: 1px solid #ccc;
		border-radius: 5px;
		width: 100%;
		font-size: 14px;
	}

	.form-textarea {
		resize: vertical;
		min-height: 100px;
	}

	.btn {
		padding: 10px 15px;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-size: 14px;
		background-color: #007bff;
		color: white;
	}

		.btn:hover {
			background-color: #0056b3;
		}
</style>